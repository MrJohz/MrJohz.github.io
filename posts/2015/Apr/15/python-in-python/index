title: Writing Python in Python
slug: python-in-python
date: 2015-04-15 11:50:00
tags: python, coding


Python was my first programming language.  Some time around the age of sixteen or
seventeen, I got it into my head that I should learn a programming language, and one thing
lead to another, and I ended up working through Swaroop's [A Byte of Python][py-byte], and
then Sande & Sande's [Hello World][hello-world-book].  The latter was particularly good,
and I learned a lot of stuff, and, alongside most new programmers, I loved getting my
computer to do things that I'd told it to do.

[py-byte]: <http://www.swaroopch.com/notes/python/>
[hello-world-book]: <http://www.manning.com/sande/>

That said, Python didn't excite me.  Programming was cool, and new, and fun, but Python
itself was, well, the tool I used.  And a fairly standard tool at that.  What changed
was [Core Python Programming][core-python].  (Yes, this is basically book review corner,
I'll get to the more interesting stuff in a minute...)  Core Python, despite being
somewhat out-of-date at this point (although it does include notes on pre-announced 2.6
features, and a couple of paragraphs on how Python will slowly be transitioning to
"Python 3000", which I'm sure if very exciting news for all of us!) was a particularly
good book at describing Python, rather than just programming.  Which finally brings us
on to the first bit of code that made me feel really excited about *Python*.

[core-python]: <http://corepython.com/>

    :::python3

    class MyNumber:

        def __init__(self, num):
            self.my_num = num

        def __add__(self, other):
            return MyNumber(self.my_num + other.my_num)

        def __repr__(self):
            return "MyNumber(" + str(self.my_num) + ")"

What's so special about these two lines?  Well, this is a method inside a user-defined
class in Python.  More specifically, it's a "magic method", or dunder method (dunder as
in double underscore) that is called when the addition operator is used on the defined
class.  It allows the user of this class to write code that looks like this:

    :::pycon python3=True

    >>> a = MyNumber(7)
    >>> b = MyNumber(8)
    >>> c = a + b  # MAGIC!
    >>> c.my_num
    15

To me, however, this was my first chance to break open Python and write inside.

You see, Python is written in Python.  This is an almost entirely untrue statement, so I
probably ought to explain myself first.  I'm not talking about the interpreter, which for
most people is written in C.  No, I'm talking about the language itself.  The language
"Python" is written in Python.

This statement is only somewhat untrue.  That's a start!  Here's an example.

    :::pycon python3=True
    >>> a = 3
    >>> b = MyNumber(3)

    >>> a.__add__
    <method-wrapper '__add__' of int object at 0x829c1c0>
    >>> b.__add__
    <bound method MyNumber.__add__ of MyNumber(3)>

    >>> a.__add__(7)
    10
    >>> a + 7
    10
    >>> b.__add__(MyNumber(7))
    MyNumber(10)
    >>> b + MyNumber(7)
    MyNumber(10)

    >>> a + "string"  # Python doesn't do automatic coercion, remember!
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: unsupported operand type(s) for +: 'int' and 'str'
    >>> a.__add__("string")  # Surely this should do the same thing?
    NotImplemented
    >>> b + "string"
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 5, in __add__
    AttributeError: 'str' object has no attribute 'my_num'
    >>> b.__add__("string")
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "<stdin>", line 5, in __add__
    AttributeError: 'str' object has no attribute 'my_num'

The most interesting bits here are the differences between the built-in int operations,
and the custom MyNumber class operations.  Here's each one in turn:

Firstly, in Python 3, classes have functions attached to them.  Instances
