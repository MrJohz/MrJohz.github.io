title: Shell Completion in Fish
slug: completion-in-fish
date: 2015-08-14 14:50:04
tags: fish-shell, coding


I use the [fish shell][] as my go-to shell.  It's fun, it's colourful, it's full of features, and I'd highly recommend it.  One of those features is a shell-completion mechanism in the form of the `complete` command.  Now many other shells have completion, but for now I'm just going to play with the fish version, and then see if I can apply it to other shells later on, perhaps in a future post.

[fish shell]: <http://fishshell.com/>

I'm interested in shell completions because I got bored the other day and started learning [Rust][], and now I'm trying to build a program that, given an input definition, will output a shell script to define the shell completions for that input.  Yesterday I got to the point that I could just about comprehend the Rust part (if in doubt, stick another "`&`" in front of it[^rust-advice]), and realised that actually the new difficulty was that I didn't really know how to do shell completion.

[rust]: <http://rust-lang.org/>
[^rust-advice]: This is not true


## First steps - just options

The best place to start is with a program to define the completions for.  Starting as simple as possible, here's one defined in a sort-of-docopt-y form.

```text
USAGE:
    my-favourite-program [OPTIONS]

OPTIONS:
    -a, --all               Do all the favourite things
    -u                      Only use unsigned integers
    -w, -weird              Weird "old-style" option
```

Only options, but three different kinds.  There's short options (`-x`), long options (`--long-opt`) and also weird single-dashed long options that fish calls "old-style".  The example given in the fish shell docs is `-Wall`, but then I've always understood that to be "-W, with the argument 'all'".  Regardless, how do you complete this different options?

The full signature of a program can't be given in one single definition, instead each option is given separately.  The `complete` command starts by defining what command the completion applies to using the `--command` option.  This is followed by all of the alternatives for each option, using the `--short-option` flag for short options, the `--long-option` flag for long options, and the `--old-option` flag for old options.  Finally, an optional description can be attached using the `--description` flag.

The order of the flags passed to `complete` don't actually matter as far as I can tell, but doing it in the same order each time makes it much easier to read the command, so I'll do it that way.  All in all, that means the completion file might look something like this:

```sh
complete --command 'my-favourite-program' --short-option 'a' --long-option 'all' \
    --description 'Do all the favourite things'
complete --command 'my-favourite-program' --short-option 'u' \
    --description 'Only use unsigned integers'
complete --command 'my-favourite-program' --short-option 'w' --old-option 'weird' \
    --description 'Weird "old-style" option'
```

To test that this works, run those commands in a fish shell, then type `my-favourite-program -<tab>`.  You should get something that looks a bit like this:

```console
$ my-favourite-program -<tab>
--all  (Do all the favourite things)  -u  (Only use unsigned integers)  -weird  (Weird "old-style" option)
-a     (Do all the favourite things)  -w    (Weird "old-style" option)
$ my-favourite-program -weird
```


## Getting more complex - adding arguments

This is all okay, but it's a bit boring.  Many options require an argument of some kind.  How does that work?

Fish has a couple of different switches here.  Firstly, option arguments can be specified using the `--arguments` option.  `--arguments` takes a single parameter that takes "a space-separated list of possible option-arguments, which may contain subshells".

There's also some extra switches that specify particulars about how the argument should be treated.  For example, the `--require-parameter` switch tells fish that a particular argument must have an argument.  This means, among other things, that it can't be used in the middle of a set of short options.  For example, given a command with options `-a -b -c` where `-b` has a required parameter, fish shell knows that `-ac` can still be followed by another option, but that `-ab` cannot be followed by the `-c` option, it will be followed by an argument.

Additionally, by default fish will assume that the files in the current directory can always be passed as arguments to the current option.  To prevent this, the `--no-files` switch can be passed.  `--no-files` can be combined with `--require-parameter` using the `--exclusive` switch.

Let's go back to the original program definition, change it so some of the commands take arguments, and try to fill those arguments in.

```text
USAGE:
    my-favourite-program [OPTIONS]

OPTIONS:
    -f, --file FILE         Include FILE in program
    -x, --extra on|off      Turns extra on or off
    -c, --command COMMAND   The cargo command to execute beforehand
```

Okay, so this program is getting more and more contrived.  I've added a few different options to play with to try out different things.

The `--file` option is probably the easiest one to start with.  It takes any file - that's fish's default anyway.  It is also a required parameter, so the `--require-parameter` option can be added in.  This is what it looks like:

```sh
complete --command 'my-favourite-program' --short-option 'f' --long-option 'file' \
    --require-parameter \
    --description 'Include FILE in program'
```

The second option, `--extra` is also fairly simple.  It takes either 'on' or 'off' and nothing else.  As there's a required option, and files aren't allowed, this deserves the `--exclusive` switch, as well as the argument specification.

```sh
complete --command 'my-favourite-program' --short-option 'x' --long-option 'extra' \
    --exclusive --arguments 'on off' \
    --description 'Turns extra on or off'
```

You can try both of those fairly easily, although the first one doesn't really do all that much.  The last option, `--command`, is the most interesting.  It takes a cargo command.  This could be produced by manually typing out all the different cargo commands, but dammit this is the future, and if we aren't allowed hoverboards and ray-guns we might as well use what we have got.

What we have is subshells.  Interestingly, in fish, subshells aren't expanded inside strings as one might expect, which means that the `complete` command can use them to define short functions that list the available arguments dynamically.  This particular feature isn't necessarily all that useful for listing cargo commands, as those commands are unlikely to change very often, but it is pretty neat and comes in handy elsewhere.

To get a list of cargo commands, I've used `cargo --list`, removed all of the spaces, and cut off the first line.  It probably isn't the most efficient, but it works.

```sh
complete --command 'my-favourite-program' --short-option 'c' --long-option 'command' \
    --exclusive --arguments "(cargo --list | tr -d ' ' | sed '1d')" \
    --description 'The cargo command to execute beforehand'
```

Originally, I thought that the `--arguments` option only applied to options.  It doesn't - this also works for general arguments.  Assuming `my-favourite-program` now takes files as arguments, but only accepts files with no 's' in them in the local directory, you might get something like this:

```sh
complete --command 'my-favourite-program' \
    --exclusive --arguments "(ls -p | grep -v '/' | grep -v 's')" \
    --description 'Argument!'
```

```console
$ ls
cache/      develop_server.sh*  Makefile        pelicanconf.pyc  publishconf.py   requirements.txt  theme2/
content/    fabfile.py          output/         pelican.pid      publishconf.pyc  srv.pid
crowsfoot/  fabfile.pyc         pelicanconf.py  plugins/         __pycache__/     theme/
$ my-favourite-program <tab>
fabfile.py   (Argument!)  Makefile     (Argument!)  pelicanconf.py   (Argument!)
fabfile.pyc  (Argument!)  pelican.pid  (Argument!)  pelicanconf.pyc  (Argument!)
```


## Screw it all - subcommands

So far, the quest for fish completion has been pretty simple.  Generally there's been an option to pass to the `complete` command that has taken care of any trouble.  If something more complex has been required, it's generally been just a subshell away.

Unfortunately, that all goes away when subcommands turn up.  Fish's autocomplete doesn't have any concept of subcommands, just different arguments, so there's no single switch that can declare the exact syntax of the command.  A naive attempt might be to use multiple `--command` options, but that just applies the same completion to different top-level commands.  I also tried using a command with spaces in (e.g. `--command 'git status'`) but that just set  up the completions for the command `git\ status`.  Which is basically exactly what I expected, but it's nice to at least hope once to be able to use the easy option...

What is there, then?  Well, one of the options for `complete` is `--condition`.  This option takes a string indicating a function to call.  Every time a particular command is tab-completed, fish will call the condition-function for each completion, and if that condition returns `0` or true, it will display that completion.

Additionally, fish also provides a function for retrieving the current "buffer" - the text written so far at the prompt.  In theory, it should be possible to work out which subcommand's completions are needed by working out what subcommands are currently in that buffer.

As an example, and to show that this applies to literally any form of the completion that we've seen so far, let's consider a command that, if the string `'opt'` is given on the commandline - anywhere at all - the option `--mytest` can be completed.

```text
# first, we need to define this function
# also it turns out that pygments doesn't support fish, and my computer doesn't like
# pretending that this is any other shell language, so no highlighting, sorry.  :/

function __fish_complete_test
    set cmd (commandline -opc) # gets the current buffer
    if contains 'opt' $cmd
        return 0 # can completion
    end
    return 1 # cannot complete
end
```
```sh
# Now define the completion
# For the curious, this can be highlighted as sh because it doesn't contain
# any if-end blocks.
complete --command 'my-favourite-program' --long 'mytest' \
    --condition '__fish_complete_test' \
    --description 'defies description'
```

That works, but now the value that the command is looking for is hardcoded.  That's an easy problem to solve - functions can take parameters, just as they can elsewhere in the fish shell.  To test it, if the shell contains `'opt'`, it will give the mytest option, but if it contains `'arg'`, it will have the mytest argument.

```text
function __fish_complete_test
    set cmd (commandline -opc) # gets the current buffer
    set needle $argv[1]
    if contains $needle $cmd
        return 0 # can completion
    end
    return 1 # cannot complete
end
```
```sh
complete --command 'my-favourite-program' --long 'mytest' \
    --condition '__fish_complete_test opt' \
    --description 'defies description'
complete --command 'my-favourite-program' --arguments 'mytest' \
    --condition '__fish_complete_test arg' \
    --description 'defies description'
```

And that works as well!  However, there's another snag here.  `'opt'` and `'arg'` could be anywhere in the command, not just in the correct places.  But subcommands rely on an order or hierarchy, from the base command through each subcommand to the final leaf subcommand that is executed.  That can still be determined, it just requires a bit more effort.  Given a list of subcommands with a certain depth, the simplest way that I can come up with without hardcoding too much is to loop through each of the subcommands and check that the token on the buffer at that position equals the subcommand at that level.

An example will probably explain this better.

```text
function __fish_at_level
  set cmd (commandline -opc)
  set subcommands $argv
  set subcommands_len (count $subcommands)
  if [ (count $cmd) -eq $subcommands_len ]
    for i in (seq $subcommands_len)
      if [ $subcommands[$i] != $cmd[$i] ]
        return 1
      end
    end
    return 0
  end

  return 1
end
```
```sh
complete --command 'my-favourite-program' \
    --condition '__fish_at_level my-favourite-program'
    --arguments 'open close' --exclusive
complete --command 'my-favourite-program' \
    --condition '__fish_at_level my-favourite-program subcommand'
    --arguments 'yes no' --exclusive
```

If the prompt starts with just `my-favourite-program`, autocomplete will produce `'open'` or `'close'`.  On the other hand, if the prompt reads `my-favourite-program subcommand`, then autocomplete will suggest `'yes'` and `'no'`.

This doesn't work perfectly.  There are two big issues with it that I can see.  Firstly, it pins the name of the command being completed.  The fish shell has a concept of "wrapping" commands that allows one command to inherit another's completions.  However, the condition function defined here pins the command down - another command wrapping this would never pass the condition because it wouldn't have the same first token on the buffer.

The other big issue is that this allows for one, and only one completion for each subcommand.  That is, if the input so far has been "myprog foo --opt=arg", then the condition won't select any arguments for the command foo, because `--opt=arg` already exists on the buffer.

I'm not going to work through the solutions for these right here, because they're complicated, and I'm not entirely sure my solution is all that brilliant.  Bear in mind that I'm looking for a generic solution I write out as a header to all of my Rust program's completion scripts - in general, it may (read will) be far more efficient to tailor the condition function to the command you're writing a completion for.

However, to finish, I'll show the finished condition function, and link to a [file on Github][gh-fish-completion] that demonstrates how to use it, and provides completions for a basic imaginary command.

[gh-fish-completion]: <https://github.com/MrJohz/completist/blob/2a120d8174c58ae85f87123844ae8988e39e9a47/samples/fish_completion.fish>

```text
function __fish_at_level
  # set useful variables
  set cmd (commandline -opc)
  set subcmd_index (contains --index '' $argv)
  if [ $subcmd_index -eq 1 ]
    set subcommands # empty list
  else
    set subcommands $argv[1..(math $subcmd_index - 1)]
  end
  if [ $subcmd_index -eq (count $argv) ]
    set ignore_commands # empty list
  else
    set ignore_commands $argv[(math $subcmd_index + 1)..-1]
  end
  set subcommands_len (count $subcommands)

  # Test that the initial subcommands are always equal
  if [ (count $cmd) -le $subcommands_len ]
    return 1
  end
  for i in (seq $subcommands_len)
    if [ $subcommands[$i] != $cmd[(math $i + 1)] ]
      return 1
    end
  end

  # Test that the most recent command isn't a further subcommand
  for i in $ignore_commands
    if [ (count $cmd) -lt (math $subcommands_len + 2) ]
      return 0
    else if [ $cmd[(math $subcommands_len + 2)] = $i ]
      return 1
    end
  end

  return 0
end
```
