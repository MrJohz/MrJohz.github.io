title: Shell Completion in Fish
slug: completion-in-fish
date: 2015-08-14 14:50:04
tags: fish-shell, coding



I use the [fish shell][] as my go-to shell.  It's fun, it's colourful, it's full of features, and I'd highly recommend it.  One of those features is a shell-completion mechanism in the form of the `complete` command.  Now many other shells have completion, but for now I'm just going to play with the fish version, and then see if I can apply it to other shells later on, perhaps in a future post.

[fish shell]: <http://fishshell.com/>

I'm interested in shell completions because I got bored the other day and started learning [Rust][], and now I'm trying to build a program that, given an input definition, will output a shell script to define the shell completions for that input.  Yesterday I got to the point that I could just about comprehend the Rust part (if in doubt, stick another "`&`" in front of it[^rust-advice]), and realised that actually the new difficulty was that I didn't really know how to do shell completion.

[rust]: <http://rust-lang.org/>
[^rust-advice]: This is not true

## First steps - just options

The best place to start is with a program to define the completions for.  Starting as simple as possible, here's one defined in a sort-of-docopt-y form.

```text
USAGE:
    my-favourite-program [OPTIONS]

OPTIONS:
    -a, --all               Do all the favourite things
    -u                      Only use unsigned integers
    -w, -weird              Weird "old-style" option
```

Only options, but three different kinds.  There's short options (`-x`), long options (`--long-opt`) and also weird single-dashed long options that fish calls "old-style".  The example given in the fish shell docs is `-Wall`, but then I've always understood that to be "-W, with the argument 'all'".  Regardless, how do you complete this different options?

The full signature of a program can't be given in one single definition, instead each option is given separately.  The `complete` command starts by defining what command the completion applies to using the `--command` option.  This is followed by all of the alternatives for each option, using the `--short-option` flag for short options, the `--long-option` flag for long options, and the `--old-option` flag for old options.  Finally, an optional description can be attached using the `--description` flag.

The order of the flags passed to `complete` don't actually matter as far as I can tell, but doing it in the same order each time makes it much easier to read the command, so I'll do it that way.  All in all, that means the completion file might look something like this:

```sh
complete --command 'my-favourite-program' --short-option 'a' --long-option 'all' \
    --description 'Do all the favourite things'
complete --command 'my-favourite-program' --short-option 'u' \
    --description 'Only use unsigned integers'
complete --command 'my-favourite-program' --short-option 'w' --old-option 'weird' \
    --description 'Weird "old-style" option'
```

To test that this works, run those commands in a fish shell, then type `my-favourite-program -<tab>`.  You should get something that looks a bit like this:

```shell-session
$ my-favourite-program -
--all  (Do all the favourite things)  -u  (Only use unsigned integers)  -weird  (Weird "old-style" option)
-a     (Do all the favourite things)  -w    (Weird "old-style" option)
$ my-favourite-program -weird
```

This is okay, but it's a bit boring.  Many options require an argument of some kind.  How does that work?

Fish has a couple of different switches here.  Firstly, option arguments can be specified using the `--arguments` option.  `--arguments` takes a single parameter that takes "a space-separated list of possible option-arguments, which may contain subshells".

There's also some extra switches that specify particulars about how the argument should be treated.  For example, the `--require-parameter` switch tells fish that a particular argument must have an argument.  This means, among other things, that it can't be used in the middle of a set of short options.  For example, given a command with options `-a -b -c` where `-b` has a required parameter, fish shell knows that `-ac` can still be followed by another option, but that `-ab` cannot be followed by the `-c` option, it will be followed by an argument.

Additionally, by default fish will assume that the files in the current directory can always be passed as arguments to the current option.  To prevent this, the `--no-files` switch can be passed.  `--no-files` can be combined with `--require-parameter` using the `--exclusive` switch.

Let's go back to the original program definition, change it so some of the commands take arguments, and try to fill those arguments in.

```text
USAGE:
    my-favourite-program [OPTIONS]

OPTIONS:
    -f, --file FILE         Include FILE in program
    -x, --extra on|off      Turns extra on or off
    -c, --command COMMAND   The cargo command to execute beforehand
```

Okay, so this program is getting more and more contrived.  I've added a few different options to play with to try out different things.

The `--file` option is probably the easiest one to start with.  It takes any file - that's fish's default anyway.  It is also a required parameter, so the `--require-parameter` option can be added in.  This is what it looks like:

```sh
complete --command 'my-favourite-program' --short-option 'f' --long-option 'file' \
    --require-parameter \
    --description 'Include FILE in program'
```

The second option, `--extra` is also fairly simple.  It takes either 'on' or 'off' and nothing else.  As there's a required option, and files aren't allowed, this deserves the `--exclusive` switch, as well as the argument specification.

```sh
complete --command 'my-favourite-program' --short-option 'x' --long-option 'extra' \
    --exclusive --arguments 'on off' \
    --description 'Turns extra on or off'
```

You can try both of those fairly easily, although the first one doesn't really do all that much.  The last option, `--command`, is the most interesting.  It takes a cargo command.  This could be produced by manually typing out all the different cargo commands, but dammit this is the future, and if we aren't allowed hoverboards and ray-guns we might as well use what we have got.

What we have is subshells.  Interestingly, in fish, subshells aren't expanded inside strings as one might expect, which means that the `complete` command can use them to define short functions that list the available arguments dynamically.  This particular feature isn't necessarily all that useful for listing cargo commands, as those commands are unlikely to change very often, but it is pretty neat and comes in handy elsewhere.

To get a list of cargo commands, I've used the command `cargo --list | tr -d ' ' | sed '1d'`.  It probably isn't the most efficient, but it works.

```sh
complete --command 'my-favourite-program' --short-option 'c' --long-option 'command' \
    --exclusive --arguments "(cargo --list | tr -d ' ' | sed '1d')" \
    --description 'The cargo command to execute beforehand'
```
